<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.promagent</groupId>
    <artifactId>promagent-example</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>promagent example</name>

    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.outputEncoding>UTF-8</project.build.outputEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <promagent.framework.version>1.0-SNAPSHOT</promagent.framework.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>io.promagent</groupId>
            <artifactId>promagent-api</artifactId>
            <version>${promagent.framework.version}</version>
            <scope>provided</scope> <!-- provided via the system class loader -->
        </dependency>

        <!-- APIs to be instrumented -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope><!-- provided by the Servlet container -->
        </dependency>

        <!-- tests -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.3.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>3.11.0</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>promagent</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>io.promagent</groupId>
                <artifactId>promagent-maven-plugin</artifactId>
                <version>${promagent.framework.version}</version>
                <executions>
                    <execution>
                        <id>promagent</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.27.2</version>
                <configuration>
                    <verbose>true</verbose><!-- print build steps to stdout -->
                    <images>

                        <!-- promagent/oracle-jdk-8: base image for all tests -->
                        <image>
                            <name>${project.artifactId}/oracle-jdk-8</name>
                            <build>
                                <from>ubuntu:17.10</from>
                                <workdir>/opt</workdir>
                                <runCmds>
                                    <run>apt-get update ; apt-get upgrade -y</run>
                                    <run>apt-get install -y curl git neovim sudo</run>
                                    <run>curl --silent --location --cookie "oraclelicense=accept-securebackup-cookie" -O http://download.oracle.com/otn-pub/java/jdk/8u192-b12/750e1c8617c5452694857ad95c3ee230/jdk-8u192-linux-x64.tar.gz</run>
                                    <run>tar xfz jdk-8u192-linux-x64.tar.gz</run>
                                    <run>curl --silent -O http://ftp.fau.de/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz</run>
                                    <run>tar xfz apache-maven-3.6.0-bin.tar.gz</run>
                                    <run>
                                        echo 'export JAVA_HOME="/opt/jdk1.8.0_192"' >> /etc/profile.d/java.sh ; \
                                        echo 'export MAVEN_HOME="/opt/apache-maven-3.6.0"' >> /etc/profile.d/java.sh ; \
                                        echo 'export PATH="$JAVA_HOME/bin:$PATH"' >> /etc/profile.d/java.sh ; \
                                        echo 'export PATH="$MAVEN_HOME/bin:$PATH"' >> /etc/profile.d/java.sh ;
                                    </run>
                                    <run>adduser --disabled-password --gecos '' promagent</run>
                                    <run>echo 'promagent ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers</run>
                                </runCmds>
                                <user>promagent</user>
                                <env>
                                    <JAVA_HOME>/opt/jdk1.8.0_192</JAVA_HOME>
                                    <MAVEN_HOME>/opt/apache-maven-3.6.0</MAVEN_HOME>
                                    <PATH>/opt/jdk1.8.0_192/bin:/opt/apache-maven-3.6.0/bin:$PATH</PATH>
                                </env>
                            </build>
                        </image>

                        <!-- promagent/wildfly-kitchensink: image with wildfly and the kitchensink sample deployment -->
                        <image>
                            <name>${project.artifactId}/wildfly-kitchensink</name>
                            <build>
                                <from>${project.artifactId}/oracle-jdk-8</from>
                                <workdir>/home/promagent</workdir>
                                <runCmds>
                                    <run>curl --silent -O http://download.jboss.org/wildfly/10.1.0.Final/wildfly-10.1.0.Final.tar.gz</run>
                                    <run>tar xfz wildfly-10.1.0.Final.tar.gz</run>
                                    <run>rm wildfly-10.1.0.Final.tar.gz</run>
                                    <run>git clone https://github.com/wildfly/quickstart.git</run>
                                    <run>cd quickstart; git checkout 10.x</run>
                                    <run>cd quickstart; mvn --batch-mode --projects kitchensink,helloworld --also-make package</run>
                                    <run>mv quickstart/kitchensink/target/wildfly-kitchensink.war wildfly-10.1.0.Final/standalone/deployments</run>
                                    <!-- add the helloworld example so that we can test if promagent works with multiple deployments -->
                                    <run>mv quickstart/helloworld/target/wildfly-helloworld.war wildfly-10.1.0.Final/standalone/deployments</run>
                                    <run>rm -rf ./quickstart ; rm -rf ./.m2</run>
                                </runCmds>
                            </build>
                        </image>

                        <!-- promagent/wildfly-kitchensink-promagent: promagent added, used for the WildflyIT integration test -->
                        <image>
                            <name>${project.artifactId}/wildfly-kitchensink-promagent</name>
                            <build>
                                <from>${project.artifactId}/wildfly-kitchensink</from>
                                <runCmds>
                                    <run>
                                        echo '#!/bin/bash' >> run.sh ; \
                                        echo >> run.sh ; \
                                        echo 'cd wildfly-10.1.0.Final' >> run.sh ; \
                                        echo 'LOGMANAGER_JAR=$(find $(pwd) -name "jboss-logmanager-*.jar")' >> run.sh ; \
                                        echo 'export JAVA_OPTS="' >> run.sh ; \
                                        echo ' -Djava.net.preferIPv4Stack=true' >> run.sh ; \
                                        echo ' -Xbootclasspath/p:${LOGMANAGER_JAR}' >> run.sh ; \
                                        echo ' -Djboss.modules.system.pkgs=org.jboss.logmanager,io.promagent.agent' >> run.sh ; \
                                        echo ' -Djava.util.logging.manager=org.jboss.logmanager.LogManager' >> run.sh ; \
                                        echo ' -javaagent:../promagent.jar=port=9300' >> run.sh ; \
                                        echo '"' >> run.sh ; \
                                        echo >> run.sh ; \
                                        echo './bin/standalone.sh -b=0.0.0.0' >> run.sh ; \
                                        chmod 755 run.sh ;
                                    </run>
                                </runCmds>
                                <assembly>
                                    <targetDir>/home/promagent</targetDir>
                                    <user>promagent:promagent:promagent</user>
                                    <inline>
                                        <files>
                                            <file>
                                                <source>target/promagent.jar</source>
                                                <outputDirectory>/</outputDirectory>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <ports>
                                    <!-- The docker-maven-plugin will set wildfly.port and promagent.port -->
                                    <!-- ... to the dynamically allocated ports on the docker host. -->
                                    <port>${wildfly.port}:8080</port>
                                    <port>${promagent.port}:9300</port>
                                </ports>
                                <wait>
                                    <log>WildFly Full 10.1.0.Final .WildFly Core 2.2.0.Final. started in [0-9]+ms</log>
                                    <time>60000</time>
                                </wait>
                                <cmd>./run.sh</cmd>
                                <log>
                                    <enabled>true</enabled>
                                    <prefix>[Wildfly]</prefix>
                                </log>
                            </run>
                        </image>

                        <!-- promagent/spring: image with a Spring Boot demo application -->
                        <image>
                            <name>${project.artifactId}/spring</name>
                            <build>
                                <from>${project.artifactId}/oracle-jdk-8</from>
                                <workdir>/home/promagent</workdir>
                                <runCmds>
                                    <run>git clone https://github.com/spring-guides/gs-accessing-data-rest.git</run>
                                    <run>cd gs-accessing-data-rest/complete; mvn --batch-mode package</run>
                                    <run>mv gs-accessing-data-rest/complete/target/gs-accessing-data-rest-*.jar .</run>
                                    <run>rm -rf ./gs-accessing-data-rest ; rm -rf ./.m2</run>
                                </runCmds>
                            </build>
                        </image>

                        <!-- promagent/spring-promagent: promagent added, used for the SpringIT integration test -->
                        <image>
                            <name>${project.artifactId}/spring-promagent</name>
                            <build>
                                <from>${project.artifactId}/spring</from>
                                <runCmds>
                                    <run>
                                        echo '#!/bin/bash' >> run.sh ; \
                                        echo >> run.sh ; \
                                        echo 'java -javaagent:promagent.jar=port=9300 -jar gs-accessing-data-rest-*.jar' >> run.sh ; \
                                        chmod 755 run.sh ;
                                    </run>
                                </runCmds>
                                <assembly>
                                    <targetDir>/home/promagent</targetDir>
                                    <user>promagent:promagent:promagent</user>
                                    <inline>
                                        <files>
                                            <file>
                                                <source>target/promagent.jar</source>
                                                <outputDirectory>/</outputDirectory>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <ports>
                                    <!-- The docker-maven-plugin will set spring.port and promagent.port -->
                                    <!-- ... to the dynamically allocated ports on the docker host. -->
                                    <port>${spring.port}:8080</port>
                                    <port>${promagent.port}:9300</port>
                                </ports>
                                <wait>
                                    <log>Started Application in [0-9\.]+ seconds \(JVM running for [0-9\.]+\)</log>
                                    <time>30000</time>
                                </wait>
                                <cmd>./run.sh</cmd>
                                <log>
                                    <enabled>true</enabled>
                                    <prefix>[Spring Boot]</prefix>
                                </log>
                            </run>
                        </image>

                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- This module tests the agent jar with real application server environments using Docker containers     -->
    <!-- The Docker containers are built/started/stopped using the fabric8/docker-maven-plugin                 -->
    <!-- Use maven profiles to specify which tests are run:                                                    -->
    <!--                                                                                                       -->
    <!-- mvn clean verify:                                                                                     -->
    <!--     By default, no integration tests are run.                                                         -->
    <!-- mvn clean verify -Pwildfly:                                                                           -->
    <!--     Test against Wildfly 10.1.0.                                                                      -->
    <!-- mvn clean verify -Pspring:                                                                            -->
    <!--     Test against a Spring Boot demo application.                                                      -->
    <!--                                                                                                       -->
    <!-- If you run a profile for the first time, it will take quite long because the Docker images need to    -->
    <!-- be built. Once the images are done, running the profile will become considerably faster.              -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <profiles>
        <profile>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <id>none</id>
            <properties>
                <docker.filter>skip-docker-tests</docker.filter>
            </properties>
        </profile>
        <profile>
            <id>wildfly</id>
            <properties>
                <docker.filter>
                    ${project.artifactId}/oracle-jdk-8,
                    ${project.artifactId}/wildfly-kitchensink,
                    ${project.artifactId}/wildfly-kitchensink-promagent
                </docker.filter>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <includes>
                                <include>**/WildflyIT.java</include>
                            </includes>
                            <systemPropertyVariables>
                                <!-- Map maven variables (set by the docker-maven-plugin) to system properties -->
                                <!-- which in turn can be used in the test classes. -->
                                <deployment.url>http://${docker.host.address}:${wildfly.port}/wildfly-kitchensink</deployment.url>
                                <promagent.url>http://${docker.host.address}:${promagent.port}</promagent.url>
                            </systemPropertyVariables>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>spring</id>
            <properties>
                <docker.filter>
                    ${project.artifactId}/oracle-jdk-8,
                    ${project.artifactId}/spring,
                    ${project.artifactId}/spring-promagent
                </docker.filter>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <includes>
                                <include>**/SpringIT.java</include>
                            </includes>
                            <systemPropertyVariables>
                                <!-- Map maven variables (set by the docker-maven-plugin) to system properties -->
                                <!-- which in turn can be used in the test classes. -->
                                <deployment.url>http://${docker.host.address}:${spring.port}</deployment.url>
                                <promagent.url>http://${docker.host.address}:${promagent.port}</promagent.url>
                            </systemPropertyVariables>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
